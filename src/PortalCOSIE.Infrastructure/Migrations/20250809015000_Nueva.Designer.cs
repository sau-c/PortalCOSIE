// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortalCOSIE.Infrastructure.Data;

#nullable disable

namespace PortalCOSIE.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250809015000_Nueva")]
    partial class Nueva
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000001",
                            Email = "correo0@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO0@GMAIL.COM",
                            NormalizedUserName = "CORREO0@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000001",
                            TwoFactorEnabled = false,
                            UserName = "correo0@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000002",
                            Email = "correo1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO1@GMAIL.COM",
                            NormalizedUserName = "CORREO1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000002",
                            TwoFactorEnabled = false,
                            UserName = "correo1@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000003",
                            Email = "correo2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO2@GMAIL.COM",
                            NormalizedUserName = "CORREO2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000003",
                            TwoFactorEnabled = false,
                            UserName = "correo2@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000004",
                            Email = "correo3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO3@GMAIL.COM",
                            NormalizedUserName = "CORREO3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000004",
                            TwoFactorEnabled = false,
                            UserName = "correo3@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000005",
                            Email = "correo4@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO4@GMAIL.COM",
                            NormalizedUserName = "CORREO4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000005",
                            TwoFactorEnabled = false,
                            UserName = "correo4@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000006",
                            Email = "correo5@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO5@GMAIL.COM",
                            NormalizedUserName = "CORREO5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000006",
                            TwoFactorEnabled = false,
                            UserName = "correo5@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000007",
                            Email = "correo6@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO6@GMAIL.COM",
                            NormalizedUserName = "CORREO6@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000007",
                            TwoFactorEnabled = false,
                            UserName = "correo6@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000008",
                            Email = "correo7@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO7@GMAIL.COM",
                            NormalizedUserName = "CORREO7@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000008",
                            TwoFactorEnabled = false,
                            UserName = "correo7@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000009",
                            Email = "correo8@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO8@GMAIL.COM",
                            NormalizedUserName = "CORREO8@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000009",
                            TwoFactorEnabled = false,
                            UserName = "correo8@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000010",
                            Email = "correo9@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO9@GMAIL.COM",
                            NormalizedUserName = "CORREO9@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000010",
                            TwoFactorEnabled = false,
                            UserName = "correo9@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000011",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000011",
                            Email = "correo10@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO10@GMAIL.COM",
                            NormalizedUserName = "CORREO10@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000011",
                            TwoFactorEnabled = false,
                            UserName = "correo10@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000012",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000012",
                            Email = "correo11@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO11@GMAIL.COM",
                            NormalizedUserName = "CORREO11@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000012",
                            TwoFactorEnabled = false,
                            UserName = "correo11@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000013",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000013",
                            Email = "correo12@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO12@GMAIL.COM",
                            NormalizedUserName = "CORREO12@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000013",
                            TwoFactorEnabled = false,
                            UserName = "correo12@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000014",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000014",
                            Email = "correo13@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO13@GMAIL.COM",
                            NormalizedUserName = "CORREO13@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000014",
                            TwoFactorEnabled = false,
                            UserName = "correo13@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000015",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000015",
                            Email = "correo14@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO14@GMAIL.COM",
                            NormalizedUserName = "CORREO14@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000015",
                            TwoFactorEnabled = false,
                            UserName = "correo14@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000016",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000016",
                            Email = "correo15@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO15@GMAIL.COM",
                            NormalizedUserName = "CORREO15@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000016",
                            TwoFactorEnabled = false,
                            UserName = "correo15@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000017",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000017",
                            Email = "correo16@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO16@GMAIL.COM",
                            NormalizedUserName = "CORREO16@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000017",
                            TwoFactorEnabled = false,
                            UserName = "correo16@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000018",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000018",
                            Email = "correo17@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO17@GMAIL.COM",
                            NormalizedUserName = "CORREO17@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000018",
                            TwoFactorEnabled = false,
                            UserName = "correo17@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000019",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000019",
                            Email = "correo18@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO18@GMAIL.COM",
                            NormalizedUserName = "CORREO18@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000019",
                            TwoFactorEnabled = false,
                            UserName = "correo18@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-0000000000020",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-0000000000020",
                            Email = "correo19@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CORREO19@GMAIL.COM",
                            NormalizedUserName = "CORREO19@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFsRVgAvdDEsT2uuQ2Jt59XwO2oGIKQoqpJboUjJRIe6LjN1aSqtor4Jo1ioVdWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-0000000000020",
                            TwoFactorEnabled = false,
                            UserName = "correo19@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Alumno", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CarreraId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumeroBoleta")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PlanEstudioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarreraId");

                    b.HasIndex("NumeroBoleta")
                        .IsUnique();

                    b.HasIndex("PlanEstudioId");

                    b.ToTable("Alumno", (string)null);
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Carrera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Carrera", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Carrera centrada en la optimización de procesos tecnologicos e industriales.",
                            Nombre = "Mecatrónica"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Carrera enfocada en el desarrollo de telecomunicaciones y sistemas computacionales.",
                            Nombre = "Telemática"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Carrera centrada en la optimización de procesos.",
                            Nombre = "Biónica"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Carrera centrada en la optimización de procesos.",
                            Nombre = "Energía"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Carrera centrada en la optimización de procesos.",
                            Nombre = "ISISA"
                        });
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TramiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TramiteId");

                    b.ToTable("Documento", (string)null);
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Personal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("IdPersonal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personal", (string)null);
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.PlanEstudio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PlanEstudio", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Primer plan",
                            Nombre = "1998"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Segundo plan",
                            Nombre = "2009"
                        });
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Tramite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaConclusion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("PersonalId");

                    b.ToTable("Tramite", (string)null);
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Usuario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApellidoMaterno = "ApellidoMaterno0",
                            ApellidoPaterno = "ApellidoPaterno0",
                            IdentityUserId = "00000000-0000-0000-0000-000000000001",
                            Nombre = "Nombre0"
                        },
                        new
                        {
                            Id = 2,
                            ApellidoMaterno = "ApellidoMaterno1",
                            ApellidoPaterno = "ApellidoPaterno1",
                            IdentityUserId = "00000000-0000-0000-0000-000000000002",
                            Nombre = "Nombre1"
                        },
                        new
                        {
                            Id = 3,
                            ApellidoMaterno = "ApellidoMaterno2",
                            ApellidoPaterno = "ApellidoPaterno2",
                            IdentityUserId = "00000000-0000-0000-0000-000000000003",
                            Nombre = "Nombre2"
                        },
                        new
                        {
                            Id = 4,
                            ApellidoMaterno = "ApellidoMaterno3",
                            ApellidoPaterno = "ApellidoPaterno3",
                            IdentityUserId = "00000000-0000-0000-0000-000000000004",
                            Nombre = "Nombre3"
                        },
                        new
                        {
                            Id = 5,
                            ApellidoMaterno = "ApellidoMaterno4",
                            ApellidoPaterno = "ApellidoPaterno4",
                            IdentityUserId = "00000000-0000-0000-0000-000000000005",
                            Nombre = "Nombre4"
                        },
                        new
                        {
                            Id = 6,
                            ApellidoMaterno = "ApellidoMaterno5",
                            ApellidoPaterno = "ApellidoPaterno5",
                            IdentityUserId = "00000000-0000-0000-0000-000000000006",
                            Nombre = "Nombre5"
                        },
                        new
                        {
                            Id = 7,
                            ApellidoMaterno = "ApellidoMaterno6",
                            ApellidoPaterno = "ApellidoPaterno6",
                            IdentityUserId = "00000000-0000-0000-0000-000000000007",
                            Nombre = "Nombre6"
                        },
                        new
                        {
                            Id = 8,
                            ApellidoMaterno = "ApellidoMaterno7",
                            ApellidoPaterno = "ApellidoPaterno7",
                            IdentityUserId = "00000000-0000-0000-0000-000000000008",
                            Nombre = "Nombre7"
                        },
                        new
                        {
                            Id = 9,
                            ApellidoMaterno = "ApellidoMaterno8",
                            ApellidoPaterno = "ApellidoPaterno8",
                            IdentityUserId = "00000000-0000-0000-0000-000000000009",
                            Nombre = "Nombre8"
                        },
                        new
                        {
                            Id = 10,
                            ApellidoMaterno = "ApellidoMaterno9",
                            ApellidoPaterno = "ApellidoPaterno9",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000010",
                            Nombre = "Nombre9"
                        },
                        new
                        {
                            Id = 11,
                            ApellidoMaterno = "ApellidoMaterno10",
                            ApellidoPaterno = "ApellidoPaterno10",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000011",
                            Nombre = "Nombre10"
                        },
                        new
                        {
                            Id = 12,
                            ApellidoMaterno = "ApellidoMaterno11",
                            ApellidoPaterno = "ApellidoPaterno11",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000012",
                            Nombre = "Nombre11"
                        },
                        new
                        {
                            Id = 13,
                            ApellidoMaterno = "ApellidoMaterno12",
                            ApellidoPaterno = "ApellidoPaterno12",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000013",
                            Nombre = "Nombre12"
                        },
                        new
                        {
                            Id = 14,
                            ApellidoMaterno = "ApellidoMaterno13",
                            ApellidoPaterno = "ApellidoPaterno13",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000014",
                            Nombre = "Nombre13"
                        },
                        new
                        {
                            Id = 15,
                            ApellidoMaterno = "ApellidoMaterno14",
                            ApellidoPaterno = "ApellidoPaterno14",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000015",
                            Nombre = "Nombre14"
                        },
                        new
                        {
                            Id = 16,
                            ApellidoMaterno = "ApellidoMaterno15",
                            ApellidoPaterno = "ApellidoPaterno15",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000016",
                            Nombre = "Nombre15"
                        },
                        new
                        {
                            Id = 17,
                            ApellidoMaterno = "ApellidoMaterno16",
                            ApellidoPaterno = "ApellidoPaterno16",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000017",
                            Nombre = "Nombre16"
                        },
                        new
                        {
                            Id = 18,
                            ApellidoMaterno = "ApellidoMaterno17",
                            ApellidoPaterno = "ApellidoPaterno17",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000018",
                            Nombre = "Nombre17"
                        },
                        new
                        {
                            Id = 19,
                            ApellidoMaterno = "ApellidoMaterno18",
                            ApellidoPaterno = "ApellidoPaterno18",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000019",
                            Nombre = "Nombre18"
                        },
                        new
                        {
                            Id = 20,
                            ApellidoMaterno = "ApellidoMaterno19",
                            ApellidoPaterno = "ApellidoPaterno19",
                            IdentityUserId = "00000000-0000-0000-0000-0000000000020",
                            Nombre = "Nombre19"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Alumno", b =>
                {
                    b.HasOne("PortalCOSIE.Domain.Entities.Carrera", "Carrera")
                        .WithMany()
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PortalCOSIE.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Alumno")
                        .HasForeignKey("PortalCOSIE.Domain.Entities.Alumno", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalCOSIE.Domain.Entities.PlanEstudio", "PlanEstudio")
                        .WithMany()
                        .HasForeignKey("PlanEstudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Carrera");

                    b.Navigation("PlanEstudio");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Documento", b =>
                {
                    b.HasOne("PortalCOSIE.Domain.Entities.Tramite", "Tramite")
                        .WithMany()
                        .HasForeignKey("TramiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tramite");
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Personal", b =>
                {
                    b.HasOne("PortalCOSIE.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Personal")
                        .HasForeignKey("PortalCOSIE.Domain.Entities.Personal", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Tramite", b =>
                {
                    b.HasOne("PortalCOSIE.Domain.Entities.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PortalCOSIE.Domain.Entities.Personal", "Personal")
                        .WithMany()
                        .HasForeignKey("PersonalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("Personal");
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalCOSIE.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Alumno")
                        .IsRequired();

                    b.Navigation("Personal")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
