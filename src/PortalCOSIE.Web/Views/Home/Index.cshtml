@{
    ViewData["Title"] = "Calendario Académico de Dictámenes IPN";
}

<div class="card shadow">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h6 class="mb-0 fw-bold py-2">@ViewData["Title"]</h6>
        </div>
    </div>

    <div class="card-body p-4 overflow-auto" style="height: calc(100vh - 164px);">
        <!-- Controles -->
        <div class="d-flex align-items-center mb-3">
            <div>
                <button id="prevBtn" class="btn btn-sm btn-outline-secondary">◀</button>
                <button id="todayBtn" class="btn btn-sm btn-outline-secondary">Hoy</button>
                <button id="nextBtn" class="btn btn-sm btn-outline-secondary">▶</button>
            </div>
            <div id="monthLabel" class="ms-auto fw-bold"></div>
        </div>

        <!-- Días de la semana -->
        <div class="weekdays" style="display:grid; grid-template-columns: repeat(7,1fr); gap:6px; margin-bottom:6px; text-align:center; font-weight:600;">
            <div>Lun</div><div>Mar</div><div>Mié</div><div>Jue</div><div>Vie</div><div>Sáb</div><div>Dom</div>
        </div>

        <!-- Calendario -->
        <div id="calendar" class="calendar" style="display:grid; grid-template-columns: repeat(7,1fr); gap:6px;"></div>

        <!-- Modal (Bootstrap si está disponible) -->
        <div class="modal fade" id="eventModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p class="event-dates small text-muted"></p>
                        <div class="event-desc"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .cell {
        min-height: 100px;
        border: 1px solid #e9ecef;
        padding: 8px;
        border-radius: 6px;
        background: #fff;
        position: relative;
        overflow: hidden;
    }

    .date-number {
        position: absolute;
        top: 6px;
        right: 8px;
        font-size: 12px;
        color: #6c757d;
    }

    .other-month {
        opacity: 0.45;
    }

    .events {
        margin-top: 22px;
        display: flex;
        flex-direction: column;
        gap: 4px;
        max-height: 70px;
        overflow: auto;
        padding-right: 4px;
    }

    .event-badge {
        display: block;
        padding: 4px 6px;
        border-radius: 6px;
        color: #fff;
        font-size: 12px;
        cursor: pointer;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
        text-decoration: none;
    }
</style>

@section Scripts {
    <script>
        (function(){
            // ----- helpers -----
            function parseISODate(s){
                if(!s) return null;
                const parts = s.split('-').map(Number);
                return new Date(parts[0], parts[1]-1, parts[2]);
            }
            function formatDate(d){
                return d.toLocaleDateString('es-MX', {day:'2-digit', month:'short', year:'numeric'});
            }

            const monthNames = ['Enero','Febrero','Marzo','Abril','Mayo','Junio','Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre'];

            // Estado
            let current = new Date();
            current.setDate(1); // primer día del mes
            let events = [];

            // Carga eventos desde el servidor
            async function loadEvents(){
                try{
                    // usa Url.Action si quieres que Razor genere la URL:
                    // const url = '@Url.Action("GetEventos", "Calendario")';
                    const url = '/Calendario/GetEventos';
                    const res = await fetch(url);
                    if(!res.ok) throw new Error('Error al obtener eventos: ' + res.status);
                    const json = await res.json();
                    events = json.map(e => ({
                        id: e.id,
                        title: e.title,
                        start: parseISODate(e.start),
                        end: e.end ? parseISODate(e.end) : parseISODate(e.start),
                        color: e.color || '#0d6efd',
                        description: e.description || ''
                    }));
                }catch(err){
                    console.error(err);
                    events = [];
                }
                renderCalendar();
            }

            // calcula el primer Lunes para renderizar (inicio de la matriz de 6 semanas)
            function getStartMonday(dt){
                const d = new Date(dt.getFullYear(), dt.getMonth(), 1);
                // JS: 0=Dom..6=Sab. Convertir a 0=Mon..6=Sun -> (day+6)%7
                const dayIndex = (d.getDay() + 6) % 7;
                d.setDate(d.getDate() - dayIndex);
                return d;
            }

            // Render del calendario (6 semanas, 42 celdas)
            function renderCalendar(){
                const calendarEl = document.getElementById('calendar');
                const monthLabel = document.getElementById('monthLabel');
                calendarEl.innerHTML = '';
                monthLabel.textContent = `${monthNames[current.getMonth()]} ${current.getFullYear()}`;

                const start = getStartMonday(current);
                for(let i=0;i<42;i++){
                    const cellDate = new Date(start.getFullYear(), start.getMonth(), start.getDate() + i);
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    if(cellDate.getMonth() !== current.getMonth()) cell.classList.add('other-month');

                    const dateNum = document.createElement('div');
                    dateNum.className = 'date-number';
                    dateNum.textContent = cellDate.getDate();
                    cell.appendChild(dateNum);

                    const eventsContainer = document.createElement('div');
                    eventsContainer.className = 'events';

                    // Obtener eventos que caen en esta fecha (start..end inclusive)
                    const todaysEvents = events.filter(ev => {
                        const sd = new Date(ev.start.getFullYear(), ev.start.getMonth(), ev.start.getDate());
                        const ed = new Date(ev.end.getFullYear(), ev.end.getMonth(), ev.end.getDate());
                        const cd = new Date(cellDate.getFullYear(), cellDate.getMonth(), cellDate.getDate());
                        return cd >= sd && cd <= ed;
                    });

                    todaysEvents.forEach(ev=>{
                        const a = document.createElement('a');
                        a.className = 'event-badge';
                        a.textContent = ev.title;
                        a.href = '#';
                        a.style.backgroundColor = ev.color;
                        a.addEventListener('click', function(evt){
                            evt.preventDefault();
                            showEventModal(ev);
                        });
                        a.title = ev.title;
                        eventsContainer.appendChild(a);
                    });

                    cell.appendChild(eventsContainer);
                    calendarEl.appendChild(cell);
                }
            }

            // Mostrar detalle: usa Bootstrap modal si está disponible, sino fallback alert
            function showEventModal(ev){
                const modalEl = document.getElementById('eventModal');
                modalEl.querySelector('.modal-title').textContent = ev.title;
                modalEl.querySelector('.modal-body .event-dates').textContent = `${formatDate(ev.start)}${(ev.end && ev.end.getTime() !== ev.start.getTime()) ? ' — '+formatDate(ev.end) : ''}`;
                modalEl.querySelector('.modal-body .event-desc').textContent = ev.description;
                if(typeof bootstrap !== 'undefined'){
                    const modal = new bootstrap.Modal(modalEl);
                    modal.show();
                } else {
                    alert(ev.title + "\n" + formatDate(ev.start) + "\n\n" + ev.description);
                }
            }

            // Controles
            document.getElementById('prevBtn').addEventListener('click', ()=>{
                current.setMonth(current.getMonth() - 1);
                renderCalendar();
            });
            document.getElementById('nextBtn').addEventListener('click', ()=>{
                current.setMonth(current.getMonth() + 1);
                renderCalendar();
            });
            document.getElementById('todayBtn').addEventListener('click', ()=>{
                current = new Date();
                current.setDate(1);
                renderCalendar();
            });

            // Inicio
            loadEvents();
        })();
    </script>
}
